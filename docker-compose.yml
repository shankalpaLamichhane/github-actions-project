version: '3.7'

services:
  db:
    # container_name: "test_db"
    # # platform: linux/x86_64
    # build:
    #   context: .
    #   dockerfile: db.Dockerfile
    # networks:
    #   - default
    # restart: always
    image: "postgres"
    env_file: 
      - .env
    # ports:
    #   # <Port exposed> : < MySQL Port running inside container>
    #   - "54322:5432"

    # setting some env vars to create the DB
    # environment:
    #   # MYSQL_RANDOM_ROOT_PASSWORD: "secret"
    #   MYSQL_DATABASE: "actionssdfsdf"
    #   MYSQL_ROOT_PASSWORD: "password"
      # MYSQL_USER: "root"
      # MYSQL_PASSWORD: "password"
      # OR if you want to use "root" as the user, just these two lines
      # MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      # MYSQL_DATABASE: ${DATABASE_NAME}

    # we mount a data volume to make sure we don't lose data
    volumes:
      - database-data:/var/lib/postgresql/data/ # persist data even if container shuts down

    # command: --default-authentication-plugin=mysql_native_password
  api:
    container_name:  "test_api"
    # network_mode: host
    # we want to use the image which is build from our Dockerfile
    build:
      context: .
      dockerfile: api.Dockerfile
    ports:
      - "8080:8080"
    # we are depending on the mysql backend
    depends_on:
      - db
    # We mount the working dir into the container, handy for development
    # This is what makes the hot reloading work inside of a Docker container
    volumes:
      - .:/app/

networks:
  host:
volumes:
  database-data: